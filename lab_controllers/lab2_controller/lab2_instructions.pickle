(dp0
S'overview'
p1
S'\x1b[1;32m\nOverview:\x1b[0m\n\x1b[1;34mUsing the command line to pass arguments to programs is very common in the\nunix world. Long before there were graphical user interface (gui) based\nprograms, the command line was used to specify program options. Consider the\nfollowing simple examples:\n\x1b[0m\n\x1b[1;31m  $ ls -l\x1b[0m\n\x1b[1;31m  $ make -f app.make\n\x1b[0m\n\x1b[1;34mIn the first command, the -l (letter ell) option requests that the long form\nof a directory listing be used. In the second, the -f app.make option tells\nmake to read the rules defined in app.make. We will learn more about make\nlater.\x1b[0m\n\x1b[1;32m\nHandling Commandline Arguments:\x1b[0m\n\x1b[1;34mThe standard prototype for the main function in C/C++ (and a number of other\nprogramming languages) in the Unix environment is:\x1b[0m\n\x1b[1;35m\nint main(int argc, char *argv[]);\n\x1b[0m\n\x1b[1;34mor\x1b[0m\n\x1b[1;35m\nint main(int argc, char **argv);\x1b[0m\n\x1b[1;34mThe first argument, argc, holds the number of items in the argv array. Note\nthat argv contains character strings (an array of characters). This requires\nnumbers entered on the command line to be converted from a character string to\nthe necessary numerical data type.\x1b[0m'
p2
sS'activities'
p3
(lp4
S'\x1b[1;32m\nWelcome to Lab 2.\x1b[0m\n\x1b[1;34mBefore you get started on the lab, you should create a new repository using\nthe following commands:\x1b[0m\n\x1b[1;31m  $ hg init\x1b[0m\n\x1b[1;31m  $ hg addremove\x1b[0m\n\x1b[1;31m  $ hg com -m "Initial commit."\x1b[0m\n\x1b[1;34mOnce this is done, check your progress with the following command:\x1b[0m\n\x1b[1;31m  $ lab_tools --check\x1b[0m'
p5
aS'\x1b[1;32m\nActivty 1:\x1b[0m\n\x1b[1;34mWrite a small program (ShowArgs) to print out all arguments given to a\nprogram.\n\nExample output:\x1b[0m\n\x1b[1;31m  $ ./ShowArgs foo bar baz\n./ShowArgs\nfoo\nbar\nbaz\n\x1b[0m\n\x1b[1;34m\n * Use the provided files.\n   * A file named "Makefile" is provided.\n   * Place all prototypes in "definitions_lab2.h"\n   * Place all definitions for these prototypes in "utilities_lab2.cc"\n   * Place your main() function in "main_lab2.cc"\n * Your program should print one commandline argument per line.\n * From the commandline, use the following commands to backup your work:\x1b[0m\n\x1b[1;31m  $ hg addremove  # This tells mercurial to track any new files and untrack deleted ones.\x1b[0m\n\x1b[1;31m  $ hg com -m "This commit message describes what the changeset does using present tense."\x1b[0m\n\x1b[1;34m * Execute the following command to build the ShowArgs executable:\x1b[0m\n\x1b[1;31m  $ make activity1\x1b[0m\n\x1b[1;34m * Execute the following command to check if all tasks for this activity are complete:\x1b[0m\n\x1b[1;31m  $ lab_tools --check\x1b[0m'
p6
aS'\x1b[1;32m\nActivity 2:\x1b[0m\n\x1b[1;34mRevise your program to add error handling code. The program should require at\nleast three command line arguments.\n * The executable will be named Act2. Use "make activity2" to make the project.\n * If too few arguments have been supplied, use the code "exit(17)" to exit\n   the program.\n * This is an example of how your program should behave:\x1b[0m\n\x1b[1;31m  $ echo \'Hello, world!\'\nHello, world!\n  $ echo $?\n0\n  $ ./Act2 foo bar baz\n  $ echo $?\n0\n  $ ./Act2 spam eggs\n  $ echo $?\n17\n\x1b[0m\n\x1b[1;34m * From the commandline, use the following commands to backup your work:\x1b[0m\n\x1b[1;31m  $ hg addremove  # This tells mercurial to track any new files and untrack deleted ones.\x1b[0m\n\x1b[1;31m  $ hg com -m "This commit message describes what the changeset does using present tense."\x1b[0m\n\x1b[1;34m * Execute the following command to build the ShowArgs executable:\x1b[0m\n\x1b[1;31m  $ make activity2\x1b[0m\n\x1b[1;34m * Execute the following command to check if all tasks for this activity are complete:\x1b[0m\n\x1b[1;31m  $ lab_tools --check\x1b[0m'
p7
aS'\x1b[1;32m\nActivity 3:\x1b[0m\n\x1b[1;34mModify your program so that it handles simple arithmetic computations.\nE.g.:\x1b[0m\n\x1b[1;31m  $ calc 2 * 3  #=> 6\x1b[0m\n\x1b[1;34m * The executable will be named calc. Use "make activity3" to make the project.\n * The executable should accept exactly 3 arguments. Return \'17\' if too few\n   or too many arguments are supplied.\n * The following operators must be supported: +, -, *, /, %\n * Use the atof function from stdlib.h for the following operators: +, -, *, /\n   The prototype for atof is: double atof(const char *str);\n * Use the atoi function form stdlib.h for the following operator: %\n   The prototype for atoi is: int atoi(const char *str);\n * From the commandline, use the following commands to backup your work:\x1b[0m\n\x1b[1;31m  $ hg addremove  # This tells mercurial to track any new files and untrack deleted ones.\x1b[0m\n\x1b[1;31m  $ hg com -m "This commit message describes what the changeset does using present tense."\x1b[0m\n\x1b[1;34m * Execute the following command to build the calc executable:\x1b[0m\n\x1b[1;31m  $ make activity3\x1b[0m\n\x1b[1;34m * Execute the following command to check if all tasks for this activity are complete:\x1b[0m\n\x1b[1;31m  $ lab_tools --check\x1b[0m'
p8
asS'instructions'
p9
S'\x1b[1;32m\nInstructions:\x1b[0m\n\x1b[1;34mIn order to check your progress, type:\x1b[0m\n\x1b[1;31m  $ lab_tools --progress\x1b[0m\n\x1b[1;34mIn order to run tests on this activity, type:\x1b[0m\n\x1b[1;31m  $ lab_tools --check\x1b[0m\n\x1b[1;36mNote: The lab_tools program will not record forward progress unless your\n      program passes all tests executed with the --check flag\x1b[0m'
p10
s.